@[Link("binaryen")]
lib LibBinaryen
  fun type_none = BinaryenTypeNone : Type
  alias X__Uint32T = LibC::UInt
  alias Uint32T = X__Uint32T
  alias Type = Uint32T
  fun type_int32 = BinaryenTypeInt32 : Type
  fun type_int64 = BinaryenTypeInt64 : Type
  fun type_float32 = BinaryenTypeFloat32 : Type
  fun type_float64 = BinaryenTypeFloat64 : Type
  fun type_vec128 = BinaryenTypeVec128 : Type
  fun type_anyref = BinaryenTypeAnyref : Type
  fun type_exnref = BinaryenTypeExnref : Type
  fun type_unreachable = BinaryenTypeUnreachable : Type
  fun type_auto = BinaryenTypeAuto : Type
  fun none = BinaryenNone : Type
  fun int32 = BinaryenInt32 : Type
  fun int64 = BinaryenInt64 : Type
  fun float32 = BinaryenFloat32 : Type
  fun float64 = BinaryenFloat64 : Type
  fun undefined = BinaryenUndefined : Type
  fun invalid_id = BinaryenInvalidId : ExpressionId
  alias ExpressionId = Uint32T
  fun block_id = BinaryenBlockId : ExpressionId
  fun if_id = BinaryenIfId : ExpressionId
  fun loop_id = BinaryenLoopId : ExpressionId
  fun break_id = BinaryenBreakId : ExpressionId
  fun switch_id = BinaryenSwitchId : ExpressionId
  fun call_id = BinaryenCallId : ExpressionId
  fun call_indirect_id = BinaryenCallIndirectId : ExpressionId
  fun local_get_id = BinaryenLocalGetId : ExpressionId
  fun local_set_id = BinaryenLocalSetId : ExpressionId
  fun global_get_id = BinaryenGlobalGetId : ExpressionId
  fun global_set_id = BinaryenGlobalSetId : ExpressionId
  fun load_id = BinaryenLoadId : ExpressionId
  fun store_id = BinaryenStoreId : ExpressionId
  fun const_id = BinaryenConstId : ExpressionId
  fun unary_id = BinaryenUnaryId : ExpressionId
  fun binary_id = BinaryenBinaryId : ExpressionId
  fun select_id = BinaryenSelectId : ExpressionId
  fun drop_id = BinaryenDropId : ExpressionId
  fun return_id = BinaryenReturnId : ExpressionId
  fun host_id = BinaryenHostId : ExpressionId
  fun nop_id = BinaryenNopId : ExpressionId
  fun unreachable_id = BinaryenUnreachableId : ExpressionId
  fun atomic_cmpxchg_id = BinaryenAtomicCmpxchgId : ExpressionId
  fun atomic_rmw_id = BinaryenAtomicRMWId : ExpressionId
  fun atomic_wait_id = BinaryenAtomicWaitId : ExpressionId
  fun atomic_notify_id = BinaryenAtomicNotifyId : ExpressionId
  fun atomic_fence_id = BinaryenAtomicFenceId : ExpressionId
  fun simd_extract_id = BinaryenSIMDExtractId : ExpressionId
  fun simd_replace_id = BinaryenSIMDReplaceId : ExpressionId
  fun simd_shuffle_id = BinaryenSIMDShuffleId : ExpressionId
  fun simd_ternary_id = BinaryenSIMDTernaryId : ExpressionId
  fun simd_shift_id = BinaryenSIMDShiftId : ExpressionId
  fun simd_load_id = BinaryenSIMDLoadId : ExpressionId
  fun memory_init_id = BinaryenMemoryInitId : ExpressionId
  fun data_drop_id = BinaryenDataDropId : ExpressionId
  fun memory_copy_id = BinaryenMemoryCopyId : ExpressionId
  fun memory_fill_id = BinaryenMemoryFillId : ExpressionId
  fun try_id = BinaryenTryId : ExpressionId
  fun throw_id = BinaryenThrowId : ExpressionId
  fun rethrow_id = BinaryenRethrowId : ExpressionId
  fun br_on_exn_id = BinaryenBrOnExnId : ExpressionId
  fun push_id = BinaryenPushId : ExpressionId
  fun pop_id = BinaryenPopId : ExpressionId
  fun external_function = BinaryenExternalFunction : ExternalKind
  alias ExternalKind = Uint32T
  fun external_table = BinaryenExternalTable : ExternalKind
  fun external_memory = BinaryenExternalMemory : ExternalKind
  fun external_global = BinaryenExternalGlobal : ExternalKind
  fun external_event = BinaryenExternalEvent : ExternalKind
  fun feature_mvp = BinaryenFeatureMVP : Features
  alias Features = Uint32T
  fun feature_atomics = BinaryenFeatureAtomics : Features
  fun feature_bulk_memory = BinaryenFeatureBulkMemory : Features
  fun feature_mutable_globals = BinaryenFeatureMutableGlobals : Features
  fun feature_nontrapping_fp_to_int = BinaryenFeatureNontrappingFPToInt : Features
  fun feature_sign_ext = BinaryenFeatureSignExt : Features
  fun feature_simd128 = BinaryenFeatureSIMD128 : Features
  fun feature_exception_handling = BinaryenFeatureExceptionHandling : Features
  fun feature_tail_call = BinaryenFeatureTailCall : Features
  fun feature_reference_types = BinaryenFeatureReferenceTypes : Features
  fun feature_all = BinaryenFeatureAll : Features
  fun module_create = BinaryenModuleCreate : ModuleRef
  alias ModuleRef = Void*
  fun module_dispose = BinaryenModuleDispose(module : ModuleRef)
  fun add_function_type = BinaryenAddFunctionType(module : ModuleRef, name : LibC::Char*, result : Type, param_types : Type*, num_params : Index) : FunctionTypeRef
  alias Index = Uint32T
  alias FunctionTypeRef = Void*
  fun remove_function_type = BinaryenRemoveFunctionType(module : ModuleRef, name : LibC::Char*)

  struct Literal
    type : Int32T
    data1 : UInt64
    data2 : UInt64
  end

  alias X__Int32T = LibC::Int
  alias Int32T = X__Int32T
  fun literal_int32 = BinaryenLiteralInt32(x : Int32T) : Literal
  fun literal_int64 = BinaryenLiteralInt64(x : Int64T) : Literal
  alias X__Int64T = LibC::Long
  alias Int64T = X__Int64T
  fun literal_float32 = BinaryenLiteralFloat32(x : LibC::Float) : Literal
  fun literal_float64 = BinaryenLiteralFloat64(x : LibC::Double) : Literal
  fun literal_vec128 = BinaryenLiteralVec128(x : Uint8T[16]) : Literal
  alias X__Uint8T = UInt8
  alias Uint8T = X__Uint8T
  fun literal_float32_bits = BinaryenLiteralFloat32Bits(x : Int32T) : Literal
  fun literal_float64_bits = BinaryenLiteralFloat64Bits(x : Int64T) : Literal
  fun clz_int32 = BinaryenClzInt32 : Op
  alias Op = Int32T
  fun ctz_int32 = BinaryenCtzInt32 : Op
  fun popcnt_int32 = BinaryenPopcntInt32 : Op
  fun neg_float32 = BinaryenNegFloat32 : Op
  fun abs_float32 = BinaryenAbsFloat32 : Op
  fun ceil_float32 = BinaryenCeilFloat32 : Op
  fun floor_float32 = BinaryenFloorFloat32 : Op
  fun trunc_float32 = BinaryenTruncFloat32 : Op
  fun nearest_float32 = BinaryenNearestFloat32 : Op
  fun sqrt_float32 = BinaryenSqrtFloat32 : Op
  fun eq_z_int32 = BinaryenEqZInt32 : Op
  fun clz_int64 = BinaryenClzInt64 : Op
  fun ctz_int64 = BinaryenCtzInt64 : Op
  fun popcnt_int64 = BinaryenPopcntInt64 : Op
  fun neg_float64 = BinaryenNegFloat64 : Op
  fun abs_float64 = BinaryenAbsFloat64 : Op
  fun ceil_float64 = BinaryenCeilFloat64 : Op
  fun floor_float64 = BinaryenFloorFloat64 : Op
  fun trunc_float64 = BinaryenTruncFloat64 : Op
  fun nearest_float64 = BinaryenNearestFloat64 : Op
  fun sqrt_float64 = BinaryenSqrtFloat64 : Op
  fun eq_z_int64 = BinaryenEqZInt64 : Op
  fun extend_s_int32 = BinaryenExtendSInt32 : Op
  fun extend_u_int32 = BinaryenExtendUInt32 : Op
  fun wrap_int64 = BinaryenWrapInt64 : Op
  fun trunc_s_float32_to_int32 = BinaryenTruncSFloat32ToInt32 : Op
  fun trunc_s_float32_to_int64 = BinaryenTruncSFloat32ToInt64 : Op
  fun trunc_u_float32_to_int32 = BinaryenTruncUFloat32ToInt32 : Op
  fun trunc_u_float32_to_int64 = BinaryenTruncUFloat32ToInt64 : Op
  fun trunc_s_float64_to_int32 = BinaryenTruncSFloat64ToInt32 : Op
  fun trunc_s_float64_to_int64 = BinaryenTruncSFloat64ToInt64 : Op
  fun trunc_u_float64_to_int32 = BinaryenTruncUFloat64ToInt32 : Op
  fun trunc_u_float64_to_int64 = BinaryenTruncUFloat64ToInt64 : Op
  fun reinterpret_float32 = BinaryenReinterpretFloat32 : Op
  fun reinterpret_float64 = BinaryenReinterpretFloat64 : Op
  fun convert_s_int32_to_float32 = BinaryenConvertSInt32ToFloat32 : Op
  fun convert_s_int32_to_float64 = BinaryenConvertSInt32ToFloat64 : Op
  fun convert_u_int32_to_float32 = BinaryenConvertUInt32ToFloat32 : Op
  fun convert_u_int32_to_float64 = BinaryenConvertUInt32ToFloat64 : Op
  fun convert_s_int64_to_float32 = BinaryenConvertSInt64ToFloat32 : Op
  fun convert_s_int64_to_float64 = BinaryenConvertSInt64ToFloat64 : Op
  fun convert_u_int64_to_float32 = BinaryenConvertUInt64ToFloat32 : Op
  fun convert_u_int64_to_float64 = BinaryenConvertUInt64ToFloat64 : Op
  fun promote_float32 = BinaryenPromoteFloat32 : Op
  fun demote_float64 = BinaryenDemoteFloat64 : Op
  fun reinterpret_int32 = BinaryenReinterpretInt32 : Op
  fun reinterpret_int64 = BinaryenReinterpretInt64 : Op
  fun extend_s8_int32 = BinaryenExtendS8Int32 : Op
  fun extend_s16_int32 = BinaryenExtendS16Int32 : Op
  fun extend_s8_int64 = BinaryenExtendS8Int64 : Op
  fun extend_s16_int64 = BinaryenExtendS16Int64 : Op
  fun extend_s32_int64 = BinaryenExtendS32Int64 : Op
  fun add_int32 = BinaryenAddInt32 : Op
  fun sub_int32 = BinaryenSubInt32 : Op
  fun mul_int32 = BinaryenMulInt32 : Op
  fun div_s_int32 = BinaryenDivSInt32 : Op
  fun div_u_int32 = BinaryenDivUInt32 : Op
  fun rem_s_int32 = BinaryenRemSInt32 : Op
  fun rem_u_int32 = BinaryenRemUInt32 : Op
  fun and_int32 = BinaryenAndInt32 : Op
  fun or_int32 = BinaryenOrInt32 : Op
  fun xor_int32 = BinaryenXorInt32 : Op
  fun shl_int32 = BinaryenShlInt32 : Op
  fun shr_u_int32 = BinaryenShrUInt32 : Op
  fun shr_s_int32 = BinaryenShrSInt32 : Op
  fun rot_l_int32 = BinaryenRotLInt32 : Op
  fun rot_r_int32 = BinaryenRotRInt32 : Op
  fun eq_int32 = BinaryenEqInt32 : Op
  fun ne_int32 = BinaryenNeInt32 : Op
  fun lt_s_int32 = BinaryenLtSInt32 : Op
  fun lt_u_int32 = BinaryenLtUInt32 : Op
  fun le_s_int32 = BinaryenLeSInt32 : Op
  fun le_u_int32 = BinaryenLeUInt32 : Op
  fun gt_s_int32 = BinaryenGtSInt32 : Op
  fun gt_u_int32 = BinaryenGtUInt32 : Op
  fun ge_s_int32 = BinaryenGeSInt32 : Op
  fun ge_u_int32 = BinaryenGeUInt32 : Op
  fun add_int64 = BinaryenAddInt64 : Op
  fun sub_int64 = BinaryenSubInt64 : Op
  fun mul_int64 = BinaryenMulInt64 : Op
  fun div_s_int64 = BinaryenDivSInt64 : Op
  fun div_u_int64 = BinaryenDivUInt64 : Op
  fun rem_s_int64 = BinaryenRemSInt64 : Op
  fun rem_u_int64 = BinaryenRemUInt64 : Op
  fun and_int64 = BinaryenAndInt64 : Op
  fun or_int64 = BinaryenOrInt64 : Op
  fun xor_int64 = BinaryenXorInt64 : Op
  fun shl_int64 = BinaryenShlInt64 : Op
  fun shr_u_int64 = BinaryenShrUInt64 : Op
  fun shr_s_int64 = BinaryenShrSInt64 : Op
  fun rot_l_int64 = BinaryenRotLInt64 : Op
  fun rot_r_int64 = BinaryenRotRInt64 : Op
  fun eq_int64 = BinaryenEqInt64 : Op
  fun ne_int64 = BinaryenNeInt64 : Op
  fun lt_s_int64 = BinaryenLtSInt64 : Op
  fun lt_u_int64 = BinaryenLtUInt64 : Op
  fun le_s_int64 = BinaryenLeSInt64 : Op
  fun le_u_int64 = BinaryenLeUInt64 : Op
  fun gt_s_int64 = BinaryenGtSInt64 : Op
  fun gt_u_int64 = BinaryenGtUInt64 : Op
  fun ge_s_int64 = BinaryenGeSInt64 : Op
  fun ge_u_int64 = BinaryenGeUInt64 : Op
  fun add_float32 = BinaryenAddFloat32 : Op
  fun sub_float32 = BinaryenSubFloat32 : Op
  fun mul_float32 = BinaryenMulFloat32 : Op
  fun div_float32 = BinaryenDivFloat32 : Op
  fun copy_sign_float32 = BinaryenCopySignFloat32 : Op
  fun min_float32 = BinaryenMinFloat32 : Op
  fun max_float32 = BinaryenMaxFloat32 : Op
  fun eq_float32 = BinaryenEqFloat32 : Op
  fun ne_float32 = BinaryenNeFloat32 : Op
  fun lt_float32 = BinaryenLtFloat32 : Op
  fun le_float32 = BinaryenLeFloat32 : Op
  fun gt_float32 = BinaryenGtFloat32 : Op
  fun ge_float32 = BinaryenGeFloat32 : Op
  fun add_float64 = BinaryenAddFloat64 : Op
  fun sub_float64 = BinaryenSubFloat64 : Op
  fun mul_float64 = BinaryenMulFloat64 : Op
  fun div_float64 = BinaryenDivFloat64 : Op
  fun copy_sign_float64 = BinaryenCopySignFloat64 : Op
  fun min_float64 = BinaryenMinFloat64 : Op
  fun max_float64 = BinaryenMaxFloat64 : Op
  fun eq_float64 = BinaryenEqFloat64 : Op
  fun ne_float64 = BinaryenNeFloat64 : Op
  fun lt_float64 = BinaryenLtFloat64 : Op
  fun le_float64 = BinaryenLeFloat64 : Op
  fun gt_float64 = BinaryenGtFloat64 : Op
  fun ge_float64 = BinaryenGeFloat64 : Op
  fun memory_size = BinaryenMemorySize : Op
  fun memory_grow = BinaryenMemoryGrow : Op
  fun atomic_rmw_add = BinaryenAtomicRMWAdd : Op
  fun atomic_rmw_sub = BinaryenAtomicRMWSub : Op
  fun atomic_rmw_and = BinaryenAtomicRMWAnd : Op
  fun atomic_rmw_or = BinaryenAtomicRMWOr : Op
  fun atomic_rmw_xor = BinaryenAtomicRMWXor : Op
  fun atomic_rmw_xchg = BinaryenAtomicRMWXchg : Op
  fun trunc_sat_s_float32_to_int32 = BinaryenTruncSatSFloat32ToInt32 : Op
  fun trunc_sat_s_float32_to_int64 = BinaryenTruncSatSFloat32ToInt64 : Op
  fun trunc_sat_u_float32_to_int32 = BinaryenTruncSatUFloat32ToInt32 : Op
  fun trunc_sat_u_float32_to_int64 = BinaryenTruncSatUFloat32ToInt64 : Op
  fun trunc_sat_s_float64_to_int32 = BinaryenTruncSatSFloat64ToInt32 : Op
  fun trunc_sat_s_float64_to_int64 = BinaryenTruncSatSFloat64ToInt64 : Op
  fun trunc_sat_u_float64_to_int32 = BinaryenTruncSatUFloat64ToInt32 : Op
  fun trunc_sat_u_float64_to_int64 = BinaryenTruncSatUFloat64ToInt64 : Op
  fun splat_vec_i8x16 = BinaryenSplatVecI8x16 : Op
  fun extract_lane_s_vec_i8x16 = BinaryenExtractLaneSVecI8x16 : Op
  fun extract_lane_u_vec_i8x16 = BinaryenExtractLaneUVecI8x16 : Op
  fun replace_lane_vec_i8x16 = BinaryenReplaceLaneVecI8x16 : Op
  fun splat_vec_i16x8 = BinaryenSplatVecI16x8 : Op
  fun extract_lane_s_vec_i16x8 = BinaryenExtractLaneSVecI16x8 : Op
  fun extract_lane_u_vec_i16x8 = BinaryenExtractLaneUVecI16x8 : Op
  fun replace_lane_vec_i16x8 = BinaryenReplaceLaneVecI16x8 : Op
  fun splat_vec_i32x4 = BinaryenSplatVecI32x4 : Op
  fun extract_lane_vec_i32x4 = BinaryenExtractLaneVecI32x4 : Op
  fun replace_lane_vec_i32x4 = BinaryenReplaceLaneVecI32x4 : Op
  fun splat_vec_i64x2 = BinaryenSplatVecI64x2 : Op
  fun extract_lane_vec_i64x2 = BinaryenExtractLaneVecI64x2 : Op
  fun replace_lane_vec_i64x2 = BinaryenReplaceLaneVecI64x2 : Op
  fun splat_vec_f32x4 = BinaryenSplatVecF32x4 : Op
  fun extract_lane_vec_f32x4 = BinaryenExtractLaneVecF32x4 : Op
  fun replace_lane_vec_f32x4 = BinaryenReplaceLaneVecF32x4 : Op
  fun splat_vec_f64x2 = BinaryenSplatVecF64x2 : Op
  fun extract_lane_vec_f64x2 = BinaryenExtractLaneVecF64x2 : Op
  fun replace_lane_vec_f64x2 = BinaryenReplaceLaneVecF64x2 : Op
  fun eq_vec_i8x16 = BinaryenEqVecI8x16 : Op
  fun ne_vec_i8x16 = BinaryenNeVecI8x16 : Op
  fun lt_s_vec_i8x16 = BinaryenLtSVecI8x16 : Op
  fun lt_u_vec_i8x16 = BinaryenLtUVecI8x16 : Op
  fun gt_s_vec_i8x16 = BinaryenGtSVecI8x16 : Op
  fun gt_u_vec_i8x16 = BinaryenGtUVecI8x16 : Op
  fun le_s_vec_i8x16 = BinaryenLeSVecI8x16 : Op
  fun le_u_vec_i8x16 = BinaryenLeUVecI8x16 : Op
  fun ge_s_vec_i8x16 = BinaryenGeSVecI8x16 : Op
  fun ge_u_vec_i8x16 = BinaryenGeUVecI8x16 : Op
  fun eq_vec_i16x8 = BinaryenEqVecI16x8 : Op
  fun ne_vec_i16x8 = BinaryenNeVecI16x8 : Op
  fun lt_s_vec_i16x8 = BinaryenLtSVecI16x8 : Op
  fun lt_u_vec_i16x8 = BinaryenLtUVecI16x8 : Op
  fun gt_s_vec_i16x8 = BinaryenGtSVecI16x8 : Op
  fun gt_u_vec_i16x8 = BinaryenGtUVecI16x8 : Op
  fun le_s_vec_i16x8 = BinaryenLeSVecI16x8 : Op
  fun le_u_vec_i16x8 = BinaryenLeUVecI16x8 : Op
  fun ge_s_vec_i16x8 = BinaryenGeSVecI16x8 : Op
  fun ge_u_vec_i16x8 = BinaryenGeUVecI16x8 : Op
  fun eq_vec_i32x4 = BinaryenEqVecI32x4 : Op
  fun ne_vec_i32x4 = BinaryenNeVecI32x4 : Op
  fun lt_s_vec_i32x4 = BinaryenLtSVecI32x4 : Op
  fun lt_u_vec_i32x4 = BinaryenLtUVecI32x4 : Op
  fun gt_s_vec_i32x4 = BinaryenGtSVecI32x4 : Op
  fun gt_u_vec_i32x4 = BinaryenGtUVecI32x4 : Op
  fun le_s_vec_i32x4 = BinaryenLeSVecI32x4 : Op
  fun le_u_vec_i32x4 = BinaryenLeUVecI32x4 : Op
  fun ge_s_vec_i32x4 = BinaryenGeSVecI32x4 : Op
  fun ge_u_vec_i32x4 = BinaryenGeUVecI32x4 : Op
  fun eq_vec_f32x4 = BinaryenEqVecF32x4 : Op
  fun ne_vec_f32x4 = BinaryenNeVecF32x4 : Op
  fun lt_vec_f32x4 = BinaryenLtVecF32x4 : Op
  fun gt_vec_f32x4 = BinaryenGtVecF32x4 : Op
  fun le_vec_f32x4 = BinaryenLeVecF32x4 : Op
  fun ge_vec_f32x4 = BinaryenGeVecF32x4 : Op
  fun eq_vec_f64x2 = BinaryenEqVecF64x2 : Op
  fun ne_vec_f64x2 = BinaryenNeVecF64x2 : Op
  fun lt_vec_f64x2 = BinaryenLtVecF64x2 : Op
  fun gt_vec_f64x2 = BinaryenGtVecF64x2 : Op
  fun le_vec_f64x2 = BinaryenLeVecF64x2 : Op
  fun ge_vec_f64x2 = BinaryenGeVecF64x2 : Op
  fun not_vec128 = BinaryenNotVec128 : Op
  fun and_vec128 = BinaryenAndVec128 : Op
  fun or_vec128 = BinaryenOrVec128 : Op
  fun xor_vec128 = BinaryenXorVec128 : Op
  fun and_not_vec128 = BinaryenAndNotVec128 : Op
  fun bitselect_vec128 = BinaryenBitselectVec128 : Op
  fun neg_vec_i8x16 = BinaryenNegVecI8x16 : Op
  fun any_true_vec_i8x16 = BinaryenAnyTrueVecI8x16 : Op
  fun all_true_vec_i8x16 = BinaryenAllTrueVecI8x16 : Op
  fun shl_vec_i8x16 = BinaryenShlVecI8x16 : Op
  fun shr_s_vec_i8x16 = BinaryenShrSVecI8x16 : Op
  fun shr_u_vec_i8x16 = BinaryenShrUVecI8x16 : Op
  fun add_vec_i8x16 = BinaryenAddVecI8x16 : Op
  fun add_sat_s_vec_i8x16 = BinaryenAddSatSVecI8x16 : Op
  fun add_sat_u_vec_i8x16 = BinaryenAddSatUVecI8x16 : Op
  fun sub_vec_i8x16 = BinaryenSubVecI8x16 : Op
  fun sub_sat_s_vec_i8x16 = BinaryenSubSatSVecI8x16 : Op
  fun sub_sat_u_vec_i8x16 = BinaryenSubSatUVecI8x16 : Op
  fun mul_vec_i8x16 = BinaryenMulVecI8x16 : Op
  fun neg_vec_i16x8 = BinaryenNegVecI16x8 : Op
  fun any_true_vec_i16x8 = BinaryenAnyTrueVecI16x8 : Op
  fun all_true_vec_i16x8 = BinaryenAllTrueVecI16x8 : Op
  fun shl_vec_i16x8 = BinaryenShlVecI16x8 : Op
  fun shr_s_vec_i16x8 = BinaryenShrSVecI16x8 : Op
  fun shr_u_vec_i16x8 = BinaryenShrUVecI16x8 : Op
  fun add_vec_i16x8 = BinaryenAddVecI16x8 : Op
  fun add_sat_s_vec_i16x8 = BinaryenAddSatSVecI16x8 : Op
  fun add_sat_u_vec_i16x8 = BinaryenAddSatUVecI16x8 : Op
  fun sub_vec_i16x8 = BinaryenSubVecI16x8 : Op
  fun sub_sat_s_vec_i16x8 = BinaryenSubSatSVecI16x8 : Op
  fun sub_sat_u_vec_i16x8 = BinaryenSubSatUVecI16x8 : Op
  fun mul_vec_i16x8 = BinaryenMulVecI16x8 : Op
  fun neg_vec_i32x4 = BinaryenNegVecI32x4 : Op
  fun any_true_vec_i32x4 = BinaryenAnyTrueVecI32x4 : Op
  fun all_true_vec_i32x4 = BinaryenAllTrueVecI32x4 : Op
  fun shl_vec_i32x4 = BinaryenShlVecI32x4 : Op
  fun shr_s_vec_i32x4 = BinaryenShrSVecI32x4 : Op
  fun shr_u_vec_i32x4 = BinaryenShrUVecI32x4 : Op
  fun add_vec_i32x4 = BinaryenAddVecI32x4 : Op
  fun sub_vec_i32x4 = BinaryenSubVecI32x4 : Op
  fun mul_vec_i32x4 = BinaryenMulVecI32x4 : Op
  fun neg_vec_i64x2 = BinaryenNegVecI64x2 : Op
  fun any_true_vec_i64x2 = BinaryenAnyTrueVecI64x2 : Op
  fun all_true_vec_i64x2 = BinaryenAllTrueVecI64x2 : Op
  fun shl_vec_i64x2 = BinaryenShlVecI64x2 : Op
  fun shr_s_vec_i64x2 = BinaryenShrSVecI64x2 : Op
  fun shr_u_vec_i64x2 = BinaryenShrUVecI64x2 : Op
  fun add_vec_i64x2 = BinaryenAddVecI64x2 : Op
  fun sub_vec_i64x2 = BinaryenSubVecI64x2 : Op
  fun abs_vec_f32x4 = BinaryenAbsVecF32x4 : Op
  fun neg_vec_f32x4 = BinaryenNegVecF32x4 : Op
  fun sqrt_vec_f32x4 = BinaryenSqrtVecF32x4 : Op
  fun qfma_vec_f32x4 = BinaryenQFMAVecF32x4 : Op
  fun qfms_vec_f32x4 = BinaryenQFMSVecF32x4 : Op
  fun add_vec_f32x4 = BinaryenAddVecF32x4 : Op
  fun sub_vec_f32x4 = BinaryenSubVecF32x4 : Op
  fun mul_vec_f32x4 = BinaryenMulVecF32x4 : Op
  fun div_vec_f32x4 = BinaryenDivVecF32x4 : Op
  fun min_vec_f32x4 = BinaryenMinVecF32x4 : Op
  fun max_vec_f32x4 = BinaryenMaxVecF32x4 : Op
  fun abs_vec_f64x2 = BinaryenAbsVecF64x2 : Op
  fun neg_vec_f64x2 = BinaryenNegVecF64x2 : Op
  fun sqrt_vec_f64x2 = BinaryenSqrtVecF64x2 : Op
  fun qfma_vec_f64x2 = BinaryenQFMAVecF64x2 : Op
  fun qfms_vec_f64x2 = BinaryenQFMSVecF64x2 : Op
  fun add_vec_f64x2 = BinaryenAddVecF64x2 : Op
  fun sub_vec_f64x2 = BinaryenSubVecF64x2 : Op
  fun mul_vec_f64x2 = BinaryenMulVecF64x2 : Op
  fun div_vec_f64x2 = BinaryenDivVecF64x2 : Op
  fun min_vec_f64x2 = BinaryenMinVecF64x2 : Op
  fun max_vec_f64x2 = BinaryenMaxVecF64x2 : Op
  fun trunc_sat_s_vec_f32x4_to_vec_i32x4 = BinaryenTruncSatSVecF32x4ToVecI32x4 : Op
  fun trunc_sat_u_vec_f32x4_to_vec_i32x4 = BinaryenTruncSatUVecF32x4ToVecI32x4 : Op
  fun trunc_sat_s_vec_f64x2_to_vec_i64x2 = BinaryenTruncSatSVecF64x2ToVecI64x2 : Op
  fun trunc_sat_u_vec_f64x2_to_vec_i64x2 = BinaryenTruncSatUVecF64x2ToVecI64x2 : Op
  fun convert_s_vec_i32x4_to_vec_f32x4 = BinaryenConvertSVecI32x4ToVecF32x4 : Op
  fun convert_u_vec_i32x4_to_vec_f32x4 = BinaryenConvertUVecI32x4ToVecF32x4 : Op
  fun convert_s_vec_i64x2_to_vec_f64x2 = BinaryenConvertSVecI64x2ToVecF64x2 : Op
  fun convert_u_vec_i64x2_to_vec_f64x2 = BinaryenConvertUVecI64x2ToVecF64x2 : Op
  fun load_splat_vec8x16 = BinaryenLoadSplatVec8x16 : Op
  fun load_splat_vec16x8 = BinaryenLoadSplatVec16x8 : Op
  fun load_splat_vec32x4 = BinaryenLoadSplatVec32x4 : Op
  fun load_splat_vec64x2 = BinaryenLoadSplatVec64x2 : Op
  fun load_ext_s_vec8x8_to_vec_i16x8 = BinaryenLoadExtSVec8x8ToVecI16x8 : Op
  fun load_ext_u_vec8x8_to_vec_i16x8 = BinaryenLoadExtUVec8x8ToVecI16x8 : Op
  fun load_ext_s_vec16x4_to_vec_i32x4 = BinaryenLoadExtSVec16x4ToVecI32x4 : Op
  fun load_ext_u_vec16x4_to_vec_i32x4 = BinaryenLoadExtUVec16x4ToVecI32x4 : Op
  fun load_ext_s_vec32x2_to_vec_i64x2 = BinaryenLoadExtSVec32x2ToVecI64x2 : Op
  fun load_ext_u_vec32x2_to_vec_i64x2 = BinaryenLoadExtUVec32x2ToVecI64x2 : Op
  fun narrow_s_vec_i16x8_to_vec_i8x16 = BinaryenNarrowSVecI16x8ToVecI8x16 : Op
  fun narrow_u_vec_i16x8_to_vec_i8x16 = BinaryenNarrowUVecI16x8ToVecI8x16 : Op
  fun narrow_s_vec_i32x4_to_vec_i16x8 = BinaryenNarrowSVecI32x4ToVecI16x8 : Op
  fun narrow_u_vec_i32x4_to_vec_i16x8 = BinaryenNarrowUVecI32x4ToVecI16x8 : Op
  fun widen_low_s_vec_i8x16_to_vec_i16x8 = BinaryenWidenLowSVecI8x16ToVecI16x8 : Op
  fun widen_high_s_vec_i8x16_to_vec_i16x8 = BinaryenWidenHighSVecI8x16ToVecI16x8 : Op
  fun widen_low_u_vec_i8x16_to_vec_i16x8 = BinaryenWidenLowUVecI8x16ToVecI16x8 : Op
  fun widen_high_u_vec_i8x16_to_vec_i16x8 = BinaryenWidenHighUVecI8x16ToVecI16x8 : Op
  fun widen_low_s_vec_i16x8_to_vec_i32x4 = BinaryenWidenLowSVecI16x8ToVecI32x4 : Op
  fun widen_high_s_vec_i16x8_to_vec_i32x4 = BinaryenWidenHighSVecI16x8ToVecI32x4 : Op
  fun widen_low_u_vec_i16x8_to_vec_i32x4 = BinaryenWidenLowUVecI16x8ToVecI32x4 : Op
  fun widen_high_u_vec_i16x8_to_vec_i32x4 = BinaryenWidenHighUVecI16x8ToVecI32x4 : Op
  fun swizzle_vec8x16 = BinaryenSwizzleVec8x16 : Op
  fun block = BinaryenBlock(module : ModuleRef, name : LibC::Char*, children : ExpressionRef*, num_children : Index, type : Type) : ExpressionRef
  alias ExpressionRef = Void*
  fun if = BinaryenIf(module : ModuleRef, condition : ExpressionRef, if_true : ExpressionRef, if_false : ExpressionRef) : ExpressionRef
  fun loop = BinaryenLoop(module : ModuleRef, in : LibC::Char*, body : ExpressionRef) : ExpressionRef
  fun break = BinaryenBreak(module : ModuleRef, name : LibC::Char*, condition : ExpressionRef, value : ExpressionRef) : ExpressionRef
  fun switch = BinaryenSwitch(module : ModuleRef, names : LibC::Char**, num_names : Index, default_name : LibC::Char*, condition : ExpressionRef, value : ExpressionRef) : ExpressionRef
  fun call = BinaryenCall(module : ModuleRef, target : LibC::Char*, operands : ExpressionRef*, num_operands : Index, return_type : Type) : ExpressionRef
  fun call_indirect = BinaryenCallIndirect(module : ModuleRef, target : ExpressionRef, operands : ExpressionRef*, num_operands : Index, type : LibC::Char*) : ExpressionRef
  fun return_call = BinaryenReturnCall(module : ModuleRef, target : LibC::Char*, operands : ExpressionRef*, num_operands : Index, return_type : Type) : ExpressionRef
  fun return_call_indirect = BinaryenReturnCallIndirect(module : ModuleRef, target : ExpressionRef, operands : ExpressionRef*, num_operands : Index, type : LibC::Char*) : ExpressionRef
  fun local_get = BinaryenLocalGet(module : ModuleRef, index : Index, type : Type) : ExpressionRef
  fun local_set = BinaryenLocalSet(module : ModuleRef, index : Index, value : ExpressionRef) : ExpressionRef
  fun local_tee = BinaryenLocalTee(module : ModuleRef, index : Index, value : ExpressionRef) : ExpressionRef
  fun global_get = BinaryenGlobalGet(module : ModuleRef, name : LibC::Char*, type : Type) : ExpressionRef
  fun global_set = BinaryenGlobalSet(module : ModuleRef, name : LibC::Char*, value : ExpressionRef) : ExpressionRef
  fun load = BinaryenLoad(module : ModuleRef, bytes : Uint32T, signed_ : Int8T, offset : Uint32T, align : Uint32T, type : Type, ptr : ExpressionRef) : ExpressionRef
  alias X__Int8T = LibC::Char
  alias Int8T = X__Int8T
  fun store = BinaryenStore(module : ModuleRef, bytes : Uint32T, offset : Uint32T, align : Uint32T, ptr : ExpressionRef, value : ExpressionRef, type : Type) : ExpressionRef
  fun const = BinaryenConst(module : ModuleRef, value : Literal) : ExpressionRef
  fun unary = BinaryenUnary(module : ModuleRef, op : Op, value : ExpressionRef) : ExpressionRef
  fun binary = BinaryenBinary(module : ModuleRef, op : Op, left : ExpressionRef, right : ExpressionRef) : ExpressionRef
  fun select = BinaryenSelect(module : ModuleRef, condition : ExpressionRef, if_true : ExpressionRef, if_false : ExpressionRef) : ExpressionRef
  fun drop = BinaryenDrop(module : ModuleRef, value : ExpressionRef) : ExpressionRef
  fun return = BinaryenReturn(module : ModuleRef, value : ExpressionRef) : ExpressionRef
  fun host = BinaryenHost(module : ModuleRef, op : Op, name : LibC::Char*, operands : ExpressionRef*, num_operands : Index) : ExpressionRef
  fun nop = BinaryenNop(module : ModuleRef) : ExpressionRef
  fun unreachable = BinaryenUnreachable(module : ModuleRef) : ExpressionRef
  fun atomic_load = BinaryenAtomicLoad(module : ModuleRef, bytes : Uint32T, offset : Uint32T, type : Type, ptr : ExpressionRef) : ExpressionRef
  fun atomic_store = BinaryenAtomicStore(module : ModuleRef, bytes : Uint32T, offset : Uint32T, ptr : ExpressionRef, value : ExpressionRef, type : Type) : ExpressionRef
  fun atomic_rmw = BinaryenAtomicRMW(module : ModuleRef, op : Op, bytes : Index, offset : Index, ptr : ExpressionRef, value : ExpressionRef, type : Type) : ExpressionRef
  fun atomic_cmpxchg = BinaryenAtomicCmpxchg(module : ModuleRef, bytes : Index, offset : Index, ptr : ExpressionRef, expected : ExpressionRef, replacement : ExpressionRef, type : Type) : ExpressionRef
  fun atomic_wait = BinaryenAtomicWait(module : ModuleRef, ptr : ExpressionRef, expected : ExpressionRef, timeout : ExpressionRef, type : Type) : ExpressionRef
  fun atomic_notify = BinaryenAtomicNotify(module : ModuleRef, ptr : ExpressionRef, notify_count : ExpressionRef) : ExpressionRef
  fun atomic_fence = BinaryenAtomicFence(module : ModuleRef) : ExpressionRef
  fun simd_extract = BinaryenSIMDExtract(module : ModuleRef, op : Op, vec : ExpressionRef, index : Uint8T) : ExpressionRef
  fun simd_replace = BinaryenSIMDReplace(module : ModuleRef, op : Op, vec : ExpressionRef, index : Uint8T, value : ExpressionRef) : ExpressionRef
  fun simd_shuffle = BinaryenSIMDShuffle(module : ModuleRef, left : ExpressionRef, right : ExpressionRef, mask : Uint8T[16]) : ExpressionRef
  fun simd_ternary = BinaryenSIMDTernary(module : ModuleRef, op : Op, a : ExpressionRef, b : ExpressionRef, c : ExpressionRef) : ExpressionRef
  fun simd_shift = BinaryenSIMDShift(module : ModuleRef, op : Op, vec : ExpressionRef, shift : ExpressionRef) : ExpressionRef
  fun simd_load = BinaryenSIMDLoad(module : ModuleRef, op : Op, offset : Uint32T, align : Uint32T, ptr : ExpressionRef) : ExpressionRef
  fun memory_init = BinaryenMemoryInit(module : ModuleRef, segment : Uint32T, dest : ExpressionRef, offset : ExpressionRef, size : ExpressionRef) : ExpressionRef
  fun data_drop = BinaryenDataDrop(module : ModuleRef, segment : Uint32T) : ExpressionRef
  fun memory_copy = BinaryenMemoryCopy(module : ModuleRef, dest : ExpressionRef, source : ExpressionRef, size : ExpressionRef) : ExpressionRef
  fun memory_fill = BinaryenMemoryFill(module : ModuleRef, dest : ExpressionRef, value : ExpressionRef, size : ExpressionRef) : ExpressionRef
  fun try = BinaryenTry(module : ModuleRef, body : ExpressionRef, catch_body : ExpressionRef) : ExpressionRef
  fun throw = BinaryenThrow(module : ModuleRef, event : LibC::Char*, operands : ExpressionRef*, num_operands : Index) : ExpressionRef
  fun rethrow = BinaryenRethrow(module : ModuleRef, exnref : ExpressionRef) : ExpressionRef
  fun br_on_exn = BinaryenBrOnExn(module : ModuleRef, name : LibC::Char*, event_name : LibC::Char*, exnref : ExpressionRef) : ExpressionRef
  fun push = BinaryenPush(module : ModuleRef, value : ExpressionRef) : ExpressionRef
  fun pop = BinaryenPop(module : ModuleRef, type : Type) : ExpressionRef
  fun expression_get_id = BinaryenExpressionGetId(expr : ExpressionRef) : ExpressionId
  fun expression_get_type = BinaryenExpressionGetType(expr : ExpressionRef) : Type
  fun expression_print = BinaryenExpressionPrint(expr : ExpressionRef)
  fun block_get_name = BinaryenBlockGetName(expr : ExpressionRef) : LibC::Char*
  fun block_get_num_children = BinaryenBlockGetNumChildren(expr : ExpressionRef) : Index
  fun block_get_child = BinaryenBlockGetChild(expr : ExpressionRef, index : Index) : ExpressionRef
  fun if_get_condition = BinaryenIfGetCondition(expr : ExpressionRef) : ExpressionRef
  fun if_get_if_true = BinaryenIfGetIfTrue(expr : ExpressionRef) : ExpressionRef
  fun if_get_if_false = BinaryenIfGetIfFalse(expr : ExpressionRef) : ExpressionRef
  fun loop_get_name = BinaryenLoopGetName(expr : ExpressionRef) : LibC::Char*
  fun loop_get_body = BinaryenLoopGetBody(expr : ExpressionRef) : ExpressionRef
  fun break_get_name = BinaryenBreakGetName(expr : ExpressionRef) : LibC::Char*
  fun break_get_condition = BinaryenBreakGetCondition(expr : ExpressionRef) : ExpressionRef
  fun break_get_value = BinaryenBreakGetValue(expr : ExpressionRef) : ExpressionRef
  fun switch_get_num_names = BinaryenSwitchGetNumNames(expr : ExpressionRef) : Index
  fun switch_get_name = BinaryenSwitchGetName(expr : ExpressionRef, index : Index) : LibC::Char*
  fun switch_get_default_name = BinaryenSwitchGetDefaultName(expr : ExpressionRef) : LibC::Char*
  fun switch_get_condition = BinaryenSwitchGetCondition(expr : ExpressionRef) : ExpressionRef
  fun switch_get_value = BinaryenSwitchGetValue(expr : ExpressionRef) : ExpressionRef
  fun call_get_target = BinaryenCallGetTarget(expr : ExpressionRef) : LibC::Char*
  fun call_get_num_operands = BinaryenCallGetNumOperands(expr : ExpressionRef) : Index
  fun call_get_operand = BinaryenCallGetOperand(expr : ExpressionRef, index : Index) : ExpressionRef
  fun call_indirect_get_target = BinaryenCallIndirectGetTarget(expr : ExpressionRef) : ExpressionRef
  fun call_indirect_get_num_operands = BinaryenCallIndirectGetNumOperands(expr : ExpressionRef) : Index
  fun call_indirect_get_operand = BinaryenCallIndirectGetOperand(expr : ExpressionRef, index : Index) : ExpressionRef
  fun local_get_get_index = BinaryenLocalGetGetIndex(expr : ExpressionRef) : Index
  fun local_set_is_tee = BinaryenLocalSetIsTee(expr : ExpressionRef) : LibC::Int
  fun local_set_get_index = BinaryenLocalSetGetIndex(expr : ExpressionRef) : Index
  fun local_set_get_value = BinaryenLocalSetGetValue(expr : ExpressionRef) : ExpressionRef
  fun global_get_get_name = BinaryenGlobalGetGetName(expr : ExpressionRef) : LibC::Char*
  fun global_set_get_name = BinaryenGlobalSetGetName(expr : ExpressionRef) : LibC::Char*
  fun global_set_get_value = BinaryenGlobalSetGetValue(expr : ExpressionRef) : ExpressionRef
  fun host_get_op = BinaryenHostGetOp(expr : ExpressionRef) : Op
  fun host_get_name_operand = BinaryenHostGetNameOperand(expr : ExpressionRef) : LibC::Char*
  fun host_get_num_operands = BinaryenHostGetNumOperands(expr : ExpressionRef) : Index
  fun host_get_operand = BinaryenHostGetOperand(expr : ExpressionRef, index : Index) : ExpressionRef
  fun load_is_atomic = BinaryenLoadIsAtomic(expr : ExpressionRef) : LibC::Int
  fun load_is_signed = BinaryenLoadIsSigned(expr : ExpressionRef) : LibC::Int
  fun load_get_offset = BinaryenLoadGetOffset(expr : ExpressionRef) : Uint32T
  fun load_get_bytes = BinaryenLoadGetBytes(expr : ExpressionRef) : Uint32T
  fun load_get_align = BinaryenLoadGetAlign(expr : ExpressionRef) : Uint32T
  fun load_get_ptr = BinaryenLoadGetPtr(expr : ExpressionRef) : ExpressionRef
  fun store_is_atomic = BinaryenStoreIsAtomic(expr : ExpressionRef) : LibC::Int
  fun store_get_bytes = BinaryenStoreGetBytes(expr : ExpressionRef) : Uint32T
  fun store_get_offset = BinaryenStoreGetOffset(expr : ExpressionRef) : Uint32T
  fun store_get_align = BinaryenStoreGetAlign(expr : ExpressionRef) : Uint32T
  fun store_get_ptr = BinaryenStoreGetPtr(expr : ExpressionRef) : ExpressionRef
  fun store_get_value = BinaryenStoreGetValue(expr : ExpressionRef) : ExpressionRef
  fun const_get_value_i32 = BinaryenConstGetValueI32(expr : ExpressionRef) : Int32T
  fun const_get_value_i64 = BinaryenConstGetValueI64(expr : ExpressionRef) : Int64T
  fun const_get_value_i64_low = BinaryenConstGetValueI64Low(expr : ExpressionRef) : Int32T
  fun const_get_value_i64_high = BinaryenConstGetValueI64High(expr : ExpressionRef) : Int32T
  fun const_get_value_f32 = BinaryenConstGetValueF32(expr : ExpressionRef) : LibC::Float
  fun const_get_value_f64 = BinaryenConstGetValueF64(expr : ExpressionRef) : LibC::Double
  fun const_get_value_v128 = BinaryenConstGetValueV128(expr : ExpressionRef, out : Uint8T*)
  fun unary_get_op = BinaryenUnaryGetOp(expr : ExpressionRef) : Op
  fun unary_get_value = BinaryenUnaryGetValue(expr : ExpressionRef) : ExpressionRef
  fun binary_get_op = BinaryenBinaryGetOp(expr : ExpressionRef) : Op
  fun binary_get_left = BinaryenBinaryGetLeft(expr : ExpressionRef) : ExpressionRef
  fun binary_get_right = BinaryenBinaryGetRight(expr : ExpressionRef) : ExpressionRef
  fun select_get_if_true = BinaryenSelectGetIfTrue(expr : ExpressionRef) : ExpressionRef
  fun select_get_if_false = BinaryenSelectGetIfFalse(expr : ExpressionRef) : ExpressionRef
  fun select_get_condition = BinaryenSelectGetCondition(expr : ExpressionRef) : ExpressionRef
  fun drop_get_value = BinaryenDropGetValue(expr : ExpressionRef) : ExpressionRef
  fun return_get_value = BinaryenReturnGetValue(expr : ExpressionRef) : ExpressionRef
  fun atomic_rmw_get_op = BinaryenAtomicRMWGetOp(expr : ExpressionRef) : Op
  fun atomic_rmw_get_bytes = BinaryenAtomicRMWGetBytes(expr : ExpressionRef) : Uint32T
  fun atomic_rmw_get_offset = BinaryenAtomicRMWGetOffset(expr : ExpressionRef) : Uint32T
  fun atomic_rmw_get_ptr = BinaryenAtomicRMWGetPtr(expr : ExpressionRef) : ExpressionRef
  fun atomic_rmw_get_value = BinaryenAtomicRMWGetValue(expr : ExpressionRef) : ExpressionRef
  fun atomic_cmpxchg_get_bytes = BinaryenAtomicCmpxchgGetBytes(expr : ExpressionRef) : Uint32T
  fun atomic_cmpxchg_get_offset = BinaryenAtomicCmpxchgGetOffset(expr : ExpressionRef) : Uint32T
  fun atomic_cmpxchg_get_ptr = BinaryenAtomicCmpxchgGetPtr(expr : ExpressionRef) : ExpressionRef
  fun atomic_cmpxchg_get_expected = BinaryenAtomicCmpxchgGetExpected(expr : ExpressionRef) : ExpressionRef
  fun atomic_cmpxchg_get_replacement = BinaryenAtomicCmpxchgGetReplacement(expr : ExpressionRef) : ExpressionRef
  fun atomic_wait_get_ptr = BinaryenAtomicWaitGetPtr(expr : ExpressionRef) : ExpressionRef
  fun atomic_wait_get_expected = BinaryenAtomicWaitGetExpected(expr : ExpressionRef) : ExpressionRef
  fun atomic_wait_get_timeout = BinaryenAtomicWaitGetTimeout(expr : ExpressionRef) : ExpressionRef
  fun atomic_wait_get_expected_type = BinaryenAtomicWaitGetExpectedType(expr : ExpressionRef) : Type
  fun atomic_notify_get_ptr = BinaryenAtomicNotifyGetPtr(expr : ExpressionRef) : ExpressionRef
  fun atomic_notify_get_notify_count = BinaryenAtomicNotifyGetNotifyCount(expr : ExpressionRef) : ExpressionRef
  fun atomic_fence_get_order = BinaryenAtomicFenceGetOrder(expr : ExpressionRef) : Uint8T
  fun simd_extract_get_op = BinaryenSIMDExtractGetOp(expr : ExpressionRef) : Op
  fun simd_extract_get_vec = BinaryenSIMDExtractGetVec(expr : ExpressionRef) : ExpressionRef
  fun simd_extract_get_index = BinaryenSIMDExtractGetIndex(expr : ExpressionRef) : Uint8T
  fun simd_replace_get_op = BinaryenSIMDReplaceGetOp(expr : ExpressionRef) : Op
  fun simd_replace_get_vec = BinaryenSIMDReplaceGetVec(expr : ExpressionRef) : ExpressionRef
  fun simd_replace_get_index = BinaryenSIMDReplaceGetIndex(expr : ExpressionRef) : Uint8T
  fun simd_replace_get_value = BinaryenSIMDReplaceGetValue(expr : ExpressionRef) : ExpressionRef
  fun simd_shuffle_get_left = BinaryenSIMDShuffleGetLeft(expr : ExpressionRef) : ExpressionRef
  fun simd_shuffle_get_right = BinaryenSIMDShuffleGetRight(expr : ExpressionRef) : ExpressionRef
  fun simd_shuffle_get_mask = BinaryenSIMDShuffleGetMask(expr : ExpressionRef, mask : Uint8T*)
  fun simd_ternary_get_op = BinaryenSIMDTernaryGetOp(expr : ExpressionRef) : Op
  fun simd_ternary_get_a = BinaryenSIMDTernaryGetA(expr : ExpressionRef) : ExpressionRef
  fun simd_ternary_get_b = BinaryenSIMDTernaryGetB(expr : ExpressionRef) : ExpressionRef
  fun simd_ternary_get_c = BinaryenSIMDTernaryGetC(expr : ExpressionRef) : ExpressionRef
  fun simd_shift_get_op = BinaryenSIMDShiftGetOp(expr : ExpressionRef) : Op
  fun simd_shift_get_vec = BinaryenSIMDShiftGetVec(expr : ExpressionRef) : ExpressionRef
  fun simd_shift_get_shift = BinaryenSIMDShiftGetShift(expr : ExpressionRef) : ExpressionRef
  fun simd_load_get_op = BinaryenSIMDLoadGetOp(expr : ExpressionRef) : Op
  fun simd_load_get_offset = BinaryenSIMDLoadGetOffset(expr : ExpressionRef) : Uint32T
  fun simd_load_get_align = BinaryenSIMDLoadGetAlign(expr : ExpressionRef) : Uint32T
  fun simd_load_get_ptr = BinaryenSIMDLoadGetPtr(expr : ExpressionRef) : ExpressionRef
  fun memory_init_get_segment = BinaryenMemoryInitGetSegment(expr : ExpressionRef) : Uint32T
  fun memory_init_get_dest = BinaryenMemoryInitGetDest(expr : ExpressionRef) : ExpressionRef
  fun memory_init_get_offset = BinaryenMemoryInitGetOffset(expr : ExpressionRef) : ExpressionRef
  fun memory_init_get_size = BinaryenMemoryInitGetSize(expr : ExpressionRef) : ExpressionRef
  fun data_drop_get_segment = BinaryenDataDropGetSegment(expr : ExpressionRef) : Uint32T
  fun memory_copy_get_dest = BinaryenMemoryCopyGetDest(expr : ExpressionRef) : ExpressionRef
  fun memory_copy_get_source = BinaryenMemoryCopyGetSource(expr : ExpressionRef) : ExpressionRef
  fun memory_copy_get_size = BinaryenMemoryCopyGetSize(expr : ExpressionRef) : ExpressionRef
  fun memory_fill_get_dest = BinaryenMemoryFillGetDest(expr : ExpressionRef) : ExpressionRef
  fun memory_fill_get_value = BinaryenMemoryFillGetValue(expr : ExpressionRef) : ExpressionRef
  fun memory_fill_get_size = BinaryenMemoryFillGetSize(expr : ExpressionRef) : ExpressionRef
  fun try_get_body = BinaryenTryGetBody(expr : ExpressionRef) : ExpressionRef
  fun try_get_catch_body = BinaryenTryGetCatchBody(expr : ExpressionRef) : ExpressionRef
  fun throw_get_event = BinaryenThrowGetEvent(expr : ExpressionRef) : LibC::Char*
  fun throw_get_operand = BinaryenThrowGetOperand(expr : ExpressionRef, index : Index) : ExpressionRef
  fun throw_get_num_operands = BinaryenThrowGetNumOperands(expr : ExpressionRef) : Index
  fun rethrow_get_exnref = BinaryenRethrowGetExnref(expr : ExpressionRef) : ExpressionRef
  fun br_on_exn_get_event = BinaryenBrOnExnGetEvent(expr : ExpressionRef) : LibC::Char*
  fun br_on_exn_get_name = BinaryenBrOnExnGetName(expr : ExpressionRef) : LibC::Char*
  fun br_on_exn_get_exnref = BinaryenBrOnExnGetExnref(expr : ExpressionRef) : ExpressionRef
  fun push_get_value = BinaryenPushGetValue(expr : ExpressionRef) : ExpressionRef
  fun add_function = BinaryenAddFunction(module : ModuleRef, name : LibC::Char*, type : FunctionTypeRef, var_types : Type*, num_var_types : Index, body : ExpressionRef) : FunctionRef
  alias FunctionRef = Void*
  fun get_function = BinaryenGetFunction(module : ModuleRef, name : LibC::Char*) : FunctionRef
  fun remove_function = BinaryenRemoveFunction(module : ModuleRef, name : LibC::Char*)
  fun add_function_import = BinaryenAddFunctionImport(module : ModuleRef, internal_name : LibC::Char*, external_module_name : LibC::Char*, external_base_name : LibC::Char*, function_type : FunctionTypeRef)
  fun add_table_import = BinaryenAddTableImport(module : ModuleRef, internal_name : LibC::Char*, external_module_name : LibC::Char*, external_base_name : LibC::Char*)
  fun add_memory_import = BinaryenAddMemoryImport(module : ModuleRef, internal_name : LibC::Char*, external_module_name : LibC::Char*, external_base_name : LibC::Char*, shared : Uint8T)
  fun add_global_import = BinaryenAddGlobalImport(module : ModuleRef, internal_name : LibC::Char*, external_module_name : LibC::Char*, external_base_name : LibC::Char*, global_type : Type, mutable_ : LibC::Int)
  fun add_event_import = BinaryenAddEventImport(module : ModuleRef, internal_name : LibC::Char*, external_module_name : LibC::Char*, external_base_name : LibC::Char*, attribute : Uint32T, event_type : FunctionTypeRef)
  fun add_export = BinaryenAddExport(module : ModuleRef, internal_name : LibC::Char*, external_name : LibC::Char*) : ExportRef
  alias ExportRef = Void*
  fun add_function_export = BinaryenAddFunctionExport(module : ModuleRef, internal_name : LibC::Char*, external_name : LibC::Char*) : ExportRef
  fun add_table_export = BinaryenAddTableExport(module : ModuleRef, internal_name : LibC::Char*, external_name : LibC::Char*) : ExportRef
  fun add_memory_export = BinaryenAddMemoryExport(module : ModuleRef, internal_name : LibC::Char*, external_name : LibC::Char*) : ExportRef
  fun add_global_export = BinaryenAddGlobalExport(module : ModuleRef, internal_name : LibC::Char*, external_name : LibC::Char*) : ExportRef
  fun add_event_export = BinaryenAddEventExport(module : ModuleRef, internal_name : LibC::Char*, external_name : LibC::Char*) : ExportRef
  fun remove_export = BinaryenRemoveExport(module : ModuleRef, external_name : LibC::Char*)
  fun add_global = BinaryenAddGlobal(module : ModuleRef, name : LibC::Char*, type : Type, mutable_ : Int8T, init : ExpressionRef) : GlobalRef
  alias GlobalRef = Void*
  fun get_global = BinaryenGetGlobal(module : ModuleRef, name : LibC::Char*) : GlobalRef
  fun remove_global = BinaryenRemoveGlobal(module : ModuleRef, name : LibC::Char*)
  fun add_event = BinaryenAddEvent(module : ModuleRef, name : LibC::Char*, attribute : Uint32T, type : FunctionTypeRef) : EventRef
  alias EventRef = Void*
  fun get_event = BinaryenGetEvent(module : ModuleRef, name : LibC::Char*) : EventRef
  fun remove_event = BinaryenRemoveEvent(module : ModuleRef, name : LibC::Char*)
  fun set_function_table = BinaryenSetFunctionTable(module : ModuleRef, initial : Index, maximum : Index, func_names : LibC::Char**, num_func_names : Index)
  fun set_memory = BinaryenSetMemory(module : ModuleRef, initial : Index, maximum : Index, export_name : LibC::Char*, segments : LibC::Char**, segment_passive : Int8T*, segment_offsets : ExpressionRef*, segment_sizes : Index*, num_segments : Index, shared : Uint8T)
  fun set_start = BinaryenSetStart(module : ModuleRef, start : FunctionRef)
  fun module_get_features = BinaryenModuleGetFeatures(module : ModuleRef) : Features
  fun module_set_features = BinaryenModuleSetFeatures(module : ModuleRef, features : Features)
  fun module_parse = BinaryenModuleParse(text : LibC::Char*) : ModuleRef
  fun module_print = BinaryenModulePrint(module : ModuleRef)
  fun module_print_asmjs = BinaryenModulePrintAsmjs(module : ModuleRef)
  fun module_validate = BinaryenModuleValidate(module : ModuleRef) : LibC::Int
  fun module_optimize = BinaryenModuleOptimize(module : ModuleRef)
  fun get_optimize_level = BinaryenGetOptimizeLevel : LibC::Int
  fun set_optimize_level = BinaryenSetOptimizeLevel(level : LibC::Int)
  fun get_shrink_level = BinaryenGetShrinkLevel : LibC::Int
  fun set_shrink_level = BinaryenSetShrinkLevel(level : LibC::Int)
  fun get_debug_info = BinaryenGetDebugInfo : LibC::Int
  fun set_debug_info = BinaryenSetDebugInfo(on : LibC::Int)
  fun module_run_passes = BinaryenModuleRunPasses(module : ModuleRef, passes : LibC::Char**, num_passes : Index)
  fun module_auto_drop = BinaryenModuleAutoDrop(module : ModuleRef)
  fun module_write = BinaryenModuleWrite(module : ModuleRef, output : LibC::Char*, output_size : LibC::SizeT) : LibC::SizeT
  fun module_write_text = BinaryenModuleWriteText(module : ModuleRef, output : LibC::Char*, output_size : LibC::SizeT) : LibC::SizeT

  struct BufferSizes
    output_bytes : LibC::SizeT
    source_map_bytes : LibC::SizeT
  end

  fun module_write_with_source_map = BinaryenModuleWriteWithSourceMap(module : ModuleRef, url : LibC::Char*, output : LibC::Char*, output_size : LibC::SizeT, source_map : LibC::Char*, source_map_size : LibC::SizeT) : BufferSizes

  struct ModuleAllocateAndWriteResult
    binary : Void*
    binary_bytes : LibC::SizeT
    source_map : LibC::Char*
  end

  fun module_allocate_and_write = BinaryenModuleAllocateAndWrite(module : ModuleRef, source_map_url : LibC::Char*) : ModuleAllocateAndWriteResult
  fun module_allocate_and_write_text = BinaryenModuleAllocateAndWriteText(module : ModuleRef*) : LibC::Char*
  fun module_read = BinaryenModuleRead(input : LibC::Char*, input_size : LibC::SizeT) : ModuleRef
  fun module_interpret = BinaryenModuleInterpret(module : ModuleRef)
  fun module_add_debug_info_file_name = BinaryenModuleAddDebugInfoFileName(module : ModuleRef, filename : LibC::Char*) : Index
  fun module_get_debug_info_file_name = BinaryenModuleGetDebugInfoFileName(module : ModuleRef, index : Index) : LibC::Char*
  fun function_type_get_name = BinaryenFunctionTypeGetName(ftype : FunctionTypeRef) : LibC::Char*
  fun function_type_get_num_params = BinaryenFunctionTypeGetNumParams(ftype : FunctionTypeRef) : Index
  fun function_type_get_param = BinaryenFunctionTypeGetParam(ftype : FunctionTypeRef, index : Index) : Type
  fun function_type_get_result = BinaryenFunctionTypeGetResult(ftype : FunctionTypeRef) : Type
  fun function_get_name = BinaryenFunctionGetName(func : FunctionRef) : LibC::Char*
  fun function_get_type = BinaryenFunctionGetType(func : FunctionRef) : LibC::Char*
  fun function_get_num_params = BinaryenFunctionGetNumParams(func : FunctionRef) : Index
  fun function_get_param = BinaryenFunctionGetParam(func : FunctionRef, index : Index) : Type
  fun function_get_result = BinaryenFunctionGetResult(func : FunctionRef) : Type
  fun function_get_num_vars = BinaryenFunctionGetNumVars(func : FunctionRef) : Index
  fun function_get_var = BinaryenFunctionGetVar(func : FunctionRef, index : Index) : Type
  fun function_get_body = BinaryenFunctionGetBody(func : FunctionRef) : ExpressionRef
  fun function_optimize = BinaryenFunctionOptimize(func : FunctionRef, module : ModuleRef)
  fun function_run_passes = BinaryenFunctionRunPasses(func : FunctionRef, module : ModuleRef, passes : LibC::Char**, num_passes : Index)
  fun function_set_debug_location = BinaryenFunctionSetDebugLocation(func : FunctionRef, expr : ExpressionRef, file_index : Index, line_number : Index, column_number : Index)
  fun global_get_name = BinaryenGlobalGetName(global : GlobalRef) : LibC::Char*
  fun global_get_type = BinaryenGlobalGetType(global : GlobalRef) : Type
  fun global_is_mutable = BinaryenGlobalIsMutable(global : GlobalRef) : LibC::Int
  fun global_get_init_expr = BinaryenGlobalGetInitExpr(global : GlobalRef) : ExpressionRef
  fun event_get_name = BinaryenEventGetName(event : EventRef) : LibC::Char*
  fun event_get_attribute = BinaryenEventGetAttribute(event : EventRef) : LibC::Int
  fun event_get_type = BinaryenEventGetType(event : EventRef) : LibC::Char*
  fun event_get_num_params = BinaryenEventGetNumParams(event : EventRef) : Index
  fun event_get_param = BinaryenEventGetParam(event : EventRef, index : Index) : Type
  fun function_import_get_module = BinaryenFunctionImportGetModule(import : FunctionRef) : LibC::Char*
  fun global_import_get_module = BinaryenGlobalImportGetModule(import : GlobalRef) : LibC::Char*
  fun event_import_get_module = BinaryenEventImportGetModule(import : EventRef) : LibC::Char*
  fun function_import_get_base = BinaryenFunctionImportGetBase(import : FunctionRef) : LibC::Char*
  fun global_import_get_base = BinaryenGlobalImportGetBase(import : GlobalRef) : LibC::Char*
  fun event_import_get_base = BinaryenEventImportGetBase(import : EventRef) : LibC::Char*
  fun export_get_kind = BinaryenExportGetKind(export_ : ExportRef) : ExternalKind
  fun export_get_name = BinaryenExportGetName(export_ : ExportRef) : LibC::Char*
  fun export_get_value = BinaryenExportGetValue(export_ : ExportRef) : LibC::Char*
  fun set_api_tracing = BinaryenSetAPITracing(on : LibC::Int)
  fun get_function_type_by_signature = BinaryenGetFunctionTypeBySignature(module : ModuleRef, result : Type, param_types : Type*, num_params : Index) : FunctionTypeRef
  fun set_colors_enabled = BinaryenSetColorsEnabled(enabled : LibC::Int)
  fun are_colors_enabled = BinaryenAreColorsEnabled : LibC::Int
end
